							Curs4- Supraincarcarea operatorilor C++

Foarte important intra la sumativ si examen practic


2.operator = membra
3. operatori +=, -=, *=, /=, %= membra
1. operator +, -, *, /, %  membra/friend
0. operator - schimbare semne membra
4.++ preincrmentare, ++postincremetare membra
5. operatorul ==, !=, <=, >=, <, >   membra/friend
6.operatorul >>, << (inserot, extractor)  membra/friend
7. operator[] indexare vecor, metrice  membra
				pt sumativ
8 conversie(Clasa)
9.*, -> (nu se cere)
10. fundor-> apel de functie

2. operator atribuiere operator=

class Fractie{
 private:
  int numarator, numitor;
 publica:
  Fractie(int numa=0, int numi=1);
  Fractie(const Functie& other);
  ~Fractie();
  Fractie& operator=(const Functie& other);
};

.cpp
Fractie::Fractie(int a, int b):numarator(a), numitor(b0{}
Fractie::~Fractie(){ }

Fractie& Fractie::operatorul=(const Functie& other){
this->numarator = other.numarator;
this->numitor = other.numitor;
return *this;
}


3. operator aritmetici compusi (+=, -=, *=, /=, %=)

T& operatorul +=(const T&)


.cpp
Fractie& Fractie::operatorul+=(const Functie& other){
this->numarator= other.numitor * this->numarator
....
}


1.operator artiburie (+, -, *, /, %)
1.1 memebra
T operator+ (const T& other);


Frecatie Freactie:: operator+(const Fractie& other)
{
Freactie rezultat;

....



return rezultat;
}

In implementare se va pune o varianta necomentata si acelalta comentata

1.2 friend(nu are acces la tgis => 2 parmetri)

firent T operaor+(const T& o1, const T& o2)

.h

firend Fractie operator+(const Functie& v1, const Functie& v2);

.cpp
Fractie operator+(const Functie& v1, const Functie& v2){
	// exact la fel ca 1.1
}


0. operator - schimbare de semn membra
Fractieoperator-(;
Fractie& Fractie operatr * = -1;
retunr *this
}


4.++, --
T& operator++(); /pre
T operator++(int); /post

T& operator--();
T operator--(int);


.cpp

Fractie& Fractie:: operator++(){ /pre

adunare ...
retunr *this;
}


Fractie Fractie:: operator++(int demmy){ /post
Fractie oldvalue = *this; // valoaea anteroara a incremerari
adunare this....

retunr oldvalue;
}


5. operator de comparatie


bool operator==(const T& other)

friend bool operator==(const T& o1, const T& o2)


6.citire, afisare 


ostream& operator<<(ostream &) const;/membru
ostream& operator<<(ostream &, const T&);/friend



ostream& Freactie::operator<<(ostream & os) const{
os << this->numarator <<"/"<< this->numitor;
retunr os;
}


ostream& operator<<(ostream &os, const Fractie& fr){
os << fr.numarator <<"/"<< fr.numitor;
return os;
}

Functile friend nu au aces la this





istream& operator >>(istrem& is);
istream& operator >>(istrem& is, Fractie& f);





!!!!!!!!!!!!



Pt examen ! 8-9-10(curs) un ex si Primul ex cu clasa sa fie fara template cu multe operatii sau cu tamplate cu mai putine 
al 3-lea ex din curs 10
la ficare fisiere din cursul 11


23 ian examen curs


!!!!!!!!!!!!




7. operator [] - operator de indexare 
Doar in clase in care apare un atribut de tip tablou unidimensional
Indesare obiectului => indexarea aelui atribut
classs MyVector{
private:
	unsigned length;
	int* vec;
prublic:
	MyVector(unsigned length = 10);
	~MyVector();
	MyVector(const MyVector& other);
	MyVector& operator=(...);
	int& operator[](intindex)const;
};
MyVector::MyVector(uncsigned length):lenght(lenght){
	vec = new int[length];
}

MyVector::MyVector(const MyVector& other){
	this->lenght = other.lenght;
	this->vec = new int [this->lenght];
	for (int i = 0; i < this->lenght; ++i)
		this->vec[i] = other.vec[i];
}



Myvector& MyVector::MyVector operator= (const MyVector& other){
	this->lenght = other.lenght;
	this->vec = new int [this->lenght];
	for (int i = 0; i < this->lenght; ++i)
		this->vec[i] = other.vec[i];
	return *this;
}


int& MyVector:: operator[](int index)const{
	retunr this->vec[index];
}



class Matrice{
	int* operator[](int indexlinie)const;
};

int* Matrice::operator[](int indexlinie)const{
	this->a[indexlinie];
}


8.conversie tip simplu -> obiect
		obiect -> tip simplu

main.cpp
Fractie f(3,4);
double d = (double)f; //0.75
Obiect->tip double
class Fractie{
	
	public: 
		double operaor double()const;
};

Double Fractie:: operatir daobule() const{
	return (double)numarator/numitro;
}
//conversie inversa din int in fractie
tip in oibect:constructor cu param.
.h Fractoe(int numarator = 0);
.cpp Fractie::Fractie(int numarator):numator(numarator), numitor(1){}

9.!!!NU TREBUIE

10.Operator functor: apel de fuctie
 Operatorul inzestreaza obiectul cu propietatea de a fi apelat.Vom apela obiectul. Prin apelul obiectului se intelege apelul adestui operator

class OrdonareDesc{
	bool operator()(cont Student& s1, const Student& s2);
};

bool OrdianreDesc::operator(--||--)
{
	if(s1.getMedeie() > s2.getMedie() ) return true;
	else
		retunr false;
}

Strudent** vecstud;
citre... n student din fiser
ifstrem fin ("Text.txt");
fin >> n;
vecstud = new Strudent*[n];
for(int i = 0; i < n; ++i){
	string nu, prenu, seci;
	float med; int varsta, anul;
	cin >> nu >> ... >> anul >> med;
	vecstud[i] = new Student[nu,...,med);
} 

#include <algorith>
sort(vecstud, vecstud + n); // daca nu se specifca al treilea parametru
//daca un vector de obiecte trebuie sortat dupa un criteriu el se implementeaza in clasa timpului de vector in operatorul <
//daca se doreste ordonarea dupa un al doilea criteriu pt el se implementeaza o alta clasa cu o singura metoda puctor(apel de fuctie) operator()(param.)

sort(vecstud, vecstud + n, ordonareDesc);
